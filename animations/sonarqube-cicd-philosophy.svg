<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1400 900" style="background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);">
  <defs>
    <!-- Gradients -->
    <linearGradient id="pipelineGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#4facfe;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#00f2fe;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="sonarGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#f093fb;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#f5576c;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="successGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#56ab2f;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#a8e063;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="failGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#eb3349;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#f45c43;stop-opacity:1" />
    </linearGradient>
    
    <linearGradient id="cardGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#ffffff;stop-opacity:0.95" />
      <stop offset="100%" style="stop-color:#f8f9fa;stop-opacity:0.95" />
    </linearGradient>
    
    <!-- Filters -->
    <filter id="glow">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    
    <filter id="shadow">
      <feGaussianBlur in="SourceAlpha" stdDeviation="4"/>
      <feOffset dx="0" dy="3" result="offsetblur"/>
      <feComponentTransfer>
        <feFuncA type="linear" slope="0.4"/>
      </feComponentTransfer>
      <feMerge>
        <feMergeNode/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    
    <!-- Arrow marker -->
    <!-- Animations -->
    <style>
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      @keyframes slideIn {
        from { transform: translateX(-50px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      
      @keyframes pulse {
        0%, 100% { transform: scale(1); opacity: 1; }
        50% { transform: scale(1.05); opacity: 0.9; }
      }
      
      @keyframes flowRight {
        0% { transform: translateX(-1400px); opacity: 0; }
        10% { opacity: 1; }
        90% { opacity: 1; }
        100% { transform: translateX(1400px); opacity: 0; }
      }
      
      @keyframes scanLine {
        0% { transform: translateX(0); opacity: 0.8; }
        100% { transform: translateX(200px); opacity: 0; }
      }
      
      @keyframes dashFlow {
        to { stroke-dashoffset: 0; }
      }
      
      @keyframes blink {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.3; }
      }
      
      @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
      
      @keyframes bounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
      }
      
      .title { animation: fadeIn 1s ease-out; }
      .pipeline-step { animation: fadeIn 1.5s ease-out; }
      .pipeline-step:nth-child(1) { animation-delay: 0.2s; }
      .pipeline-step:nth-child(2) { animation-delay: 0.4s; }
      .pipeline-step:nth-child(3) { animation-delay: 0.6s; }
      .pipeline-step:nth-child(4) { animation-delay: 0.8s; }
      .pipeline-step:nth-child(5) { animation-delay: 1s; }
      .pipeline-step:nth-child(6) { animation-delay: 1.2s; }
      
      .sonar-hub { animation: pulse 3s ease-in-out infinite; }
      
      .flow-particle {
        animation: flowRight 6s linear infinite;
      }
      
      .flow-particle:nth-child(1) { animation-delay: 0s; }
      .flow-particle:nth-child(2) { animation-delay: 2s; }
      .flow-particle:nth-child(3) { animation-delay: 4s; }
      
      .scan-line {
        animation: scanLine 2s ease-in-out infinite;
      }
      
      .arrow-line {
        stroke-dasharray: 10;
        stroke-dashoffset: 20;
        animation: dashFlow 1s linear infinite;
      }
      
      .quality-gate {
        animation: fadeIn 2s ease-out;
        animation-delay: 1.5s;
      }
      
      .blink {
        animation: blink 2s ease-in-out infinite;
      }
      
      .feedback-arrow {
        animation: slideIn 2s ease-out;
        animation-delay: 2s;
      }
      
      .rotating-gear {
        animation: rotate 8s linear infinite;
        transform-origin: center;
      }
      
      .bounce-icon {
        animation: bounce 2s ease-in-out infinite;
      }
    </style>
  </defs>
  
  <!-- Title -->
  <text x="700" y="50" font-family="Arial, sans-serif" font-size="40" font-weight="bold" fill="white" text-anchor="middle" class="title">
    SonarQube in CI/CD Philosophy
  </text>
  <text x="700" y="85" font-family="Arial, sans-serif" font-size="18" fill="#e0e0e0" text-anchor="middle" class="title">
    Continuous Quality as Part of Continuous Delivery
  </text>
  
  <!-- Main Pipeline Flow -->
  <g class="pipeline-flow">
    <!-- Background pipeline bar -->
    <rect x="100" y="200" width="1200" height="80" rx="40" fill="rgba(255,255,255,0.1)" filter="url(#shadow)"/>
    <rect x="100" y="200" width="1200" height="80" rx="40" fill="none" stroke="url(#pipelineGradient)" stroke-width="3"/>
    
    <!-- Flow particles -->
    <circle class="flow-particle" cx="0" cy="240" r="8" fill="#4facfe" filter="url(#glow)"/>
    <circle class="flow-particle" cx="0" cy="240" r="8" fill="#00f2fe" filter="url(#glow)"/>
    <circle class="flow-particle" cx="0" cy="240" r="8" fill="#4facfe" filter="url(#glow)"/>
  </g>
  
  <!-- Pipeline Steps -->
  
  <!-- Step 1: Code Commit -->
  <g class="pipeline-step">
    <rect x="120" y="140" width="150" height="120" rx="10" fill="url(#cardGradient)" filter="url(#shadow)"/>
    <text x="195" y="165" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#333" text-anchor="middle">
      1. Code Commit
    </text>
    <text x="195" y="200" font-family="Arial, sans-serif" font-size="40" text-anchor="middle">üíª</text>
    <text x="195" y="230" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      Developer
    </text>
    <text x="195" y="245" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      pushes code
    </text>
  </g>
  
  <!-- Arrow 1 -->
  <line x1="270" y1="240" x2="340" y2="240" stroke="#4facfe" stroke-width="3" class="arrow-line"/>
  
  <!-- Step 2: Build -->
  <g class="pipeline-step">
    <rect x="340" y="140" width="150" height="120" rx="10" fill="url(#cardGradient)" filter="url(#shadow)"/>
    <text x="415" y="165" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#333" text-anchor="middle">
      2. Build
    </text>
    <g class="rotating-gear">
      <text x="415" y="200" font-family="Arial, sans-serif" font-size="40" text-anchor="middle">‚öôÔ∏è</text>
    </g>
    <text x="415" y="230" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      Compile &amp;
    </text>
    <text x="415" y="245" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      Dependencies
    </text>
  </g>
  
  <!-- Arrow 2 -->
  <line x1="490" y1="240" x2="560" y2="240" stroke="#4facfe" stroke-width="3" class="arrow-line"/>
  
  <!-- Step 3: Unit Tests -->
  <g class="pipeline-step">
    <rect x="560" y="140" width="150" height="120" rx="10" fill="url(#cardGradient)" filter="url(#shadow)"/>
    <text x="635" y="165" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#333" text-anchor="middle">
      3. Unit Tests
    </text>
    <text x="635" y="200" font-family="Arial, sans-serif" font-size="40" text-anchor="middle">üß™</text>
    <text x="635" y="230" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      Automated
    </text>
    <text x="635" y="245" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      Testing
    </text>
  </g>
  
  <!-- Arrow 3 pointing to SonarQube -->
  <line x1="635" y1="260" x2="635" y2="400" stroke="#f5576c" stroke-width="4" class="arrow-line" stroke-dasharray="10"/>
  
  <!-- SonarQube Hub (Center) -->
  <g class="sonar-hub">
    <rect x="535" y="400" width="200" height="140" rx="15" fill="url(#sonarGradient)" filter="url(#shadow)"/>
    <text x="635" y="435" font-family="Arial, sans-serif" font-size="22" font-weight="bold" fill="white" text-anchor="middle">
      SonarQube
    </text>
    <text x="635" y="460" font-family="Arial, sans-serif" font-size="14" fill="white" text-anchor="middle">
      Static Analysis
    </text>
    
    <!-- Scan animation -->
    <rect class="scan-line" x="535" y="470" width="5" height="60" fill="rgba(255,255,255,0.6)"/>
    
    <text x="635" y="495" font-family="Arial, sans-serif" font-size="11" fill="white" text-anchor="middle">
      ‚Ä¢ Bugs Detection
    </text>
    <text x="635" y="510" font-family="Arial, sans-serif" font-size="11" fill="white" text-anchor="middle">
      ‚Ä¢ Security Scan
    </text>
    <text x="635" y="525" font-family="Arial, sans-serif" font-size="11" fill="white" text-anchor="middle">
      ‚Ä¢ Code Smells
    </text>
  </g>
  
  <!-- Step 4: Quality Gate -->
  <g class="quality-gate">
    <rect x="810" y="140" width="150" height="120" rx="10" fill="url(#cardGradient)" filter="url(#shadow)"/>
    <text x="885" y="165" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#333" text-anchor="middle">
      4. Quality Gate
    </text>
    <text x="885" y="200" font-family="Arial, sans-serif" font-size="40" text-anchor="middle" class="blink">üö¶</text>
    <text x="885" y="230" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      Pass / Fail
    </text>
    <text x="885" y="245" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      Decision
    </text>
  </g>
  
  <!-- Arrow from SonarQube to Quality Gate -->
  <line x1="735" y1="470" x2="810" y2="240" stroke="#f5576c" stroke-width="4" class="arrow-line"/>
  
  <!-- Arrow 4 -->
  <line x1="960" y1="240" x2="1030" y2="240" stroke="#4facfe" stroke-width="3" class="arrow-line"/>
  
  <!-- Step 5: Deploy (Success Path) -->
  <g class="pipeline-step">
    <rect x="1030" y="140" width="150" height="120" rx="10" fill="url(#cardGradient)" filter="url(#shadow)"/>
    <text x="1105" y="165" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#333" text-anchor="middle">
      5. Deploy
    </text>
    <text x="1105" y="200" font-family="Arial, sans-serif" font-size="40" text-anchor="middle" class="bounce-icon">üöÄ</text>
    <text x="1105" y="230" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      Production
    </text>
    <text x="1105" y="245" font-family="Arial, sans-serif" font-size="11" fill="#666" text-anchor="middle">
      Release
    </text>
  </g>
  
  <!-- Success/Fail Paths -->
  <g class="quality-gate">
    <!-- Success path (green) -->
    <path d="M 960 200 Q 1000 180 1030 200" fill="none" stroke="url(#successGradient)" stroke-width="5" filter="url(#glow)"/>
    <text x="990" y="175" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#56ab2f" text-anchor="middle">
      ‚úì PASS
    </text>
    
    <!-- Fail path (red) -->
    <path d="M 885 260 Q 885 340 635 380" fill="none" stroke="url(#failGradient)" stroke-width="5" filter="url(#glow)"/>
    <text x="760" y="320" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#eb3349" text-anchor="middle">
      ‚úó FAIL
    </text>
  </g>
  
  <!-- Feedback Loop Arrow -->
  <g class="feedback-arrow">
    <path d="M 535 470 Q 300 550 195 350" fill="none" stroke="white" stroke-width="4" stroke-dasharray="10,5" opacity="0.6"/>
    <text x="350" y="520" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="white" text-anchor="middle">
      üìä Instant Feedback
    </text>
  </g>
  
  <!-- Benefits Section -->
  <g transform="translate(100, 600)">
    <text x="0" y="0" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="white">
      üéØ Key Benefits of SonarQube in CI/CD
    </text>
    
    <!-- Benefit cards -->
    <g class="pipeline-step">
      <rect x="0" y="20" width="280" height="120" rx="10" fill="rgba(255,255,255,0.15)" filter="url(#shadow)"/>
      <text x="140" y="50" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white" text-anchor="middle">
        üîÑ Shift-Left Testing
      </text>
      <text x="140" y="75" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        Find bugs early in development
      </text>
      <text x="140" y="95" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        10-100x cheaper than fixing
      </text>
      <text x="140" y="115" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        in production
      </text>
    </g>
    
    <g class="pipeline-step">
      <rect x="300" y="20" width="280" height="120" rx="10" fill="rgba(255,255,255,0.15)" filter="url(#shadow)"/>
      <text x="440" y="50" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white" text-anchor="middle">
        üö´ Quality Gates
      </text>
      <text x="440" y="75" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        Automated enforcement
      </text>
      <text x="440" y="95" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        Block bad code from
      </text>
      <text x="440" y="115" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        reaching production
      </text>
    </g>
    
    <g class="pipeline-step">
      <rect x="600" y="20" width="280" height="120" rx="10" fill="rgba(255,255,255,0.15)" filter="url(#shadow)"/>
      <text x="740" y="50" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white" text-anchor="middle">
        üìà Continuous Improvement
      </text>
      <text x="740" y="75" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        Track quality trends over time
      </text>
      <text x="740" y="95" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        Measure technical debt
      </text>
      <text x="740" y="115" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        reduction
      </text>
    </g>
    
    <g class="pipeline-step">
      <rect x="900" y="20" width="280" height="120" rx="10" fill="rgba(255,255,255,0.15)" filter="url(#shadow)"/>
      <text x="1040" y="50" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white" text-anchor="middle">
        ‚ö° Developer Velocity
      </text>
      <text x="1040" y="75" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        Faster code reviews
      </text>
      <text x="1040" y="95" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        Consistent standards
      </text>
      <text x="1040" y="115" font-family="Arial, sans-serif" font-size="12" fill="#e0e0e0" text-anchor="middle">
        Less technical debt
      </text>
    </g>
  </g>
  
  <!-- Data Engineering Focus Badge -->
  <g transform="translate(1150, 310)">
    <rect x="0" y="0" width="200" height="220" rx="10" fill="rgba(255,255,255,0.1)" stroke="white" stroke-width="2" filter="url(#shadow)"/>
    <text x="100" y="30" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="white" text-anchor="middle">
      üîç For Data Engineers
    </text>
    <text x="100" y="55" font-family="Arial, sans-serif" font-size="11" fill="#e0e0e0" text-anchor="middle">
      SonarQube detects:
    </text>
    
    <text x="15" y="80" font-family="Arial, sans-serif" font-size="10" fill="#4facfe">‚úì</text>
    <text x="30" y="80" font-family="Arial, sans-serif" font-size="10" fill="white">SQL injection risks</text>
    
    <text x="15" y="100" font-family="Arial, sans-serif" font-size="10" fill="#4facfe">‚úì</text>
    <text x="30" y="100" font-family="Arial, sans-serif" font-size="10" fill="white">Exposed credentials</text>
    
    <text x="15" y="120" font-family="Arial, sans-serif" font-size="10" fill="#4facfe">‚úì</text>
    <text x="30" y="120" font-family="Arial, sans-serif" font-size="10" fill="white">Inefficient queries</text>
    
    <text x="15" y="140" font-family="Arial, sans-serif" font-size="10" fill="#4facfe">‚úì</text>
    <text x="30" y="140" font-family="Arial, sans-serif" font-size="10" fill="white">Data transformation</text>
    <text x="30" y="152" font-family="Arial, sans-serif" font-size="10" fill="white">  errors</text>
    
    <text x="15" y="172" font-family="Arial, sans-serif" font-size="10" fill="#4facfe">‚úì</text>
    <text x="30" y="172" font-family="Arial, sans-serif" font-size="10" fill="white">Pipeline reliability</text>
    <text x="30" y="184" font-family="Arial, sans-serif" font-size="10" fill="white">  issues</text>
    
    <text x="15" y="204" font-family="Arial, sans-serif" font-size="10" fill="#4facfe">‚úì</text>
    <text x="30" y="204" font-family="Arial, sans-serif" font-size="10" fill="white">GDPR/compliance</text>
    <text x="30" y="216" font-family="Arial, sans-serif" font-size="10" fill="white">  violations</text>
  </g>
  
  <!-- GCP Integration Note -->
  <g transform="translate(100, 780)">
    <rect x="0" y="0" width="1200" height="60" rx="10" fill="rgba(255,255,255,0.1)" filter="url(#shadow)"/>
    <text x="600" y="25" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="white" text-anchor="middle">
      ‚òÅÔ∏è GCP Integration: Cloud Build ‚Ä¢ GitHub Actions ‚Ä¢ GitLab CI ‚Ä¢ Cloud Source Repositories
    </text>
    <text x="600" y="45" font-family="Arial, sans-serif" font-size="11" fill="#e0e0e0" text-anchor="middle">
      SonarQube integrates seamlessly with all major GCP CI/CD platforms for automated quality checks
    </text>
  </g>
</svg>
